<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!--
Check output with <http://tools.ietf.org/tools/idnits/>
-->

<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.35) -->

<!-- give errors regarding ID-nits and DTD validation -->
<?rfc strict="yes" ?>

<!-- control the table of contents (ToC) -->
<!-- generate a ToC -->
<?rfc toc="no"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<?rfc tocdepth="3"?>

<!-- control references -->
<!-- use anchors instead of numbers for refs, i.e, [RFC2119] instead of [1] -->
<?rfc symrefs="yes"?>
<!-- sort the reference entries alphabetically -->
<?rfc sortrefs="yes" ?>

<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<!-- do not start each main section on a new page -->
<?rfc compact="yes" ?>
<!-- keep one blank line between list items -->
<?rfc subcompact="no" ?>

<!-- encourage use of "xml2rfc" tool -->
<?rfc rfcprocack="yes" ?>
<!-- end of list of popular I-D processing instructions -->

<rfc category="info" docName="draft-sctl-dnssd-unicast-autoconfig-00" ipr="trust200902">

  <front>
    <title abbrev='Unicast Service Discovery Autoconfig'>Unicast Service Discovery Autoconfiguration</title>

    <author initials='S.' surname='Cheshire' fullname='Stuart Cheshire'>
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <region>California</region>
          <code>95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>

    <author initials="T" surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <region>Vermont</region>
          <country>United States of America</country>
          <code>05301</code>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>

    <date year='2018' month='November' day='8'/>
    <area>Internet</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>DNS-Based Service Discovery</keyword>
    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>This document considers the requirements for adding
      a Thread mesh to an existing home network, where the
      infrastructure of that existing home network was designed
      with no prior knowledge of Thread, and provides no special
      or unusual facilities designed to support this.</t>
    </abstract>
  </front>

  <middle>

    <section title="Introduction">
      <t>[Authors' note: As an initial draft, in places this document
      presents several alternatives that are being considered.
      We invite feedback and comments to help evolve this document.]</t>

      <t>Because
      <xref target="Mcast">multicast can be inefficient and unreliable</xref>,
      work is taking place to enable
      <xref target="RFC6763">DNS-Based Service Discovery</xref>
      to operate with less reliance on multicast <xref target="Roadmap"/>.
      One current target use case for this work is
      <xref target="Thread">Thread</xref> wireless mesh networking.</t>

      <t>Thread wireless mesh networking uses IEEE 802.15.4 radios,
      which use little power, and are suitable for battery-powered devices.
      The Thread protocol organizes the network nodes into a mesh,
      typically with a Thread border router that connects the mesh
      to the home network.
      For the purposes of this document we will refer to the
      home network, be it Ethernet, or Wi-Fi, or both, or
      other similar technologies, simply as the home network.
      The home network forms a backbone to which one or more
      Thread mesh networks connect via Thread border routers.</t>

      <t>Existing work describes how DNS-Based Service Discovery
      can be performed using unicast on such a network.
      Devices on the Thread mesh offering services use
      <xref target="RegProt">Service Registration Protocol</xref>
      to register their services at a Service Registration Server.
      Devices seeking to discover these services send unicast queries to the
      Service Registration Server using unicast DNS
      <xref target="RFC1034"/> <xref target="RFC1035"/>
      for single individual queries,
      and using <xref target="Push">DNS Push Notifications</xref>
      where ongoing change notification is required.</t>

      <t>Certain configuration information is required for this to work.
      Devices on the Thread mesh offering services need to know
      what names to use when registering those services,
      and to what address they should send their service registrations.
      Devices seeking to discover these services need to know
      what names to use when constructing their queries,
      and to what address they should send those queries.
      In addition, IPv6 address prefixes need to be chosen
      and configured for both the home network and the
      Thread mesh network(s), and communicated, in order to
      facilitate unicast communication between clients and
      the services they have discovered.</t>

      <t>For proof-of-concept experiments, the necessary information
      can be configured manually, and this has been done successfully.
      For deployment, we need to determine how the necessary information
      will be learned and configured automatically in real-world scenarios.</t>

      <t>The Thread wireless mesh protocol includes mechanisms
      to perform configuration tasks on the mesh, like electing a lead router,
      and communicating this information to devices on the Thread mesh.
      This existing mechanism can be extended fairly simply
      to facilitate the necessary
      Service Registration Protocol configuration tasks.
      The <xref target="RegProt">Service Registration Protocol</xref>
      specification document advocates that if a device
      offering a service has no information regarding
      the domain in which to register that service,
      it should use the special use domain name <xref target="RFC6761"/> "services.arpa"
      to indicate that the Service Registration Server should substitute
      a domain of its choice, and that same mechanism is recommended in this case.</t>

      <t>On the home network side of the Thread border router,
      there are several possibilities.
      The necessary configuration tasks could be handled by the
      home network's main gateway,
      by a collection of Homenet routers using HNCP,
      or independently by the Thread border router.</t>

      <section title="Configuration by Main Gateway">
        <t>The home network's main gateway could handle the
        necessary configuration tasks.</t>

        <t>The main gateway could be responsible for selecting IPv6 address prefixes
        for each of the links in the network, and communicating that information
        to the relevant routers, perhaps using DHCPv6 prefix delegation.</t>

        <t>The information about what domain name to use for service discovery
        can be communicated to client devices on the home network
        using DHCP or IPv6 router advertisement options.
        Currently this is done using the respective "DNS search list" options,
        though new options for this specific purpose could be defined in the future.
        If the user has a registered globally unique domain name
        for this purpose and the main gateway is configured with this information,
        then that domain name can be communicated to client devices.
        In the absence of a registered globally unique domain name
        the special-use domain name <xref target="RFC6761"/> "home.arpa" <xref target="RFC8375"/>
        should be used as a reasonable out-of-the-box default.</t>

        <t>Similarly, the information about what DNS recursive resolver
        to use can be communicated to client devices on the home network
        using DHCP or IPv6 router advertisement options.
        If the main gateway configures its own address as the
        DNS recursive resolver for clients to use, it can ensure
        that operations using "home.arpa" are handled appropriately.
        Sending queries for names within "home.arpa" to public recursive
        resolvers on the Internet will not yield useful results,
        because names within "home.arpa" are not globally unique.
        They are unique only within the local network, and hence queries
        for those names need to be handled within the local network.
        </t>
      </section>

      <section title="Configuration using HNCP">
        <t>A complex home network with multiple links and multiple
        routers could be managed using HNCP.
        However, at this time, this remains a future possibility,
        since it is likely to be some time before HNCP is widely used.</t>
      </section>

      <section title="Self-Configuration by Thread Border Routers">
        <t>The previous two scenarios assume that the
        home network's main gateway, or its HNCP mesh,
        has specific capabilities to configure and support
        the use of unicast DNS service discovery.</t>

        <t>An alternative scenario is to consider the case where a
        Thread border router is added to an existing home network,
        which has no special mechanisms in place to support this operation.</t>

        <t>The remainder of this document explores this scenario.</t>

        <t>One possibility to keep in mind is that in this scenario,
        adding one or more Thread border routers to an existing home
        network that doesn't itself use HNCP, the Thread border router(s)
        themselves could use HNCP as the protocol to communicate between
        each other to coordinate their operation on the network.</t>
<?rfc needLines="40" ?>
      </section>
    </section>

    <section title="Adding Thread Mesh to Existing Home Network">
      <t>This section explores the requirements for
      connecting a Thread mesh, via a Thread border router,
      to a typical home network.
      For the purposes of this document, it is assumed that the
      existing network infrastructure is fixed and cannot be changed.
      Changes or new functionality may be implemented as required
      in the Thread devices on the Thread mesh,
      in the Thread border router,
      or in the devices on the home network
      that will be communicating with the Thread devices.
      Since this document assumes no changes to the
      existing network infrastructure,
      it is necessary to state the assumptions about that
      existing network infrastructure.</t>

      <t>We consider a typical home network to be a single multicast/broadcast domain.
      If there are multiple Ethernet switches or Wi-Fi access points,
      they are configured so that together they provide a single logical link.
      If there is a NAT gateway, it is at the network egress point.
      (A NAT gateway on the path between two devices on a home network
      makes communication between those two devices considerably
      more complicated, and this document does not address that case.)</t>

      <t>In order to add a Thread mesh usefully to an existing home network,
      several things need to be accomplished.
      The goal is to accomplish these objectives
      without requiring changes to the existing infrastructure on that home network.
        <list style='numbers'>
          <t>Delivery of unicast traffic in both directions,
          from home network to Thread mesh, and
          from Thread mesh to home network.</t>
          <t>Enabling services offered by devices on the Thread mesh
          to be discovered by clients seeking those services.</t>
          <t>Enabling services offered by devices on the home network
          to be discovered by clients on the Thread mesh seeking those services.</t>
        </list>
      </t>

<?rfc needLines="40" ?>
      <section title="Unicast Delivery">
        <t>If HNCP were in use on the network, then
        Thread border routers could participate and use HNCP
        to manage their configuration.</t>

        <t>In the absence of HNCP,
        Thread border routers need a way to self-configure,
        without assistance from the home network's existing infrastructure.</t>

        <t>What is proposed is that Thread border routers
        select a 32-bit random number,
        and use that to construct an IPv6 ULA prefix for their connected mesh,
        which is very likely to be unique in that home.
        The Thread border router then advertises reachability
        to that IPv6 ULA prefix onto the home network using
        IPv6 Router Advertisements.
        In principle, this can be done independently of whatever other
        IPv6 prefixes, if any, are being advertised on the home network
        by the home network's existing main gateway.
        [It has been reported, however, that there are at least some
        client devices that do not properly handle
        receiving multiple independent IPv6 Router Advertisements like this,
        so some investigation and bug fixing may be required to make this work.]</t>

        <t>In the case where there are multiple independent
        Thread border routers connected to the home network,
        serving separate Thread meshes, we want to avoid the
        situation where two different Thread border routers
        choose the same randomly-selected IPv6 ULA prefix.
        This can be achieved by having the Thread border routers listen
        for IPv6 Router Advertisements before selecting their IPv6 ULA prefix.
        If a Thread border router receives
        IPv6 Router Advertisements offering reachability to its
        IPv6 ULA prefix via a different path, then this indicates that
        an inadvertent duplication may have occurred, and
        the Thread border router should select a different
        IPv6 ULA prefix for its mesh.</t>
<?rfc needLines="40" ?>
      </section>

      <section anchor="ds-thread" title="Discovery of Services on the Thread Mesh">
        <t>To facilitate unicast discovery of services on the Thread mesh,
        four things need to be determined:
          <list style='numbers'>
            <t>How a device on the Thread mesh, offering services, knows
            what parent domain name to use when registering services.</t>
            <t>How that device knows
            to what address its service registrations should be sent
            (if the name does not fall under a registered globally unique domain name).</t>
            <t>How a client device, on the Thread mesh or the home network, seeking services, knows
            what parent domain name to use querying to discover services.</t>
            <t>How that device knows
            to what address its unicast service discovery queries should be sent
            (if the name does not fall under a registered globally unique domain name).</t>
          </list>
        </t>

        <t>Devices on the Thread mesh should register services using the parent
        domain "services.arpa". This indicates that the Service Registration
        Server should automatically substitute an appropriate domain.</t>

        <t>The Thread mesh management protocol can be used to
        configure devices on the Thread mesh with the address
        to which they should send their service registrations.</t>

        <t>The Thread border router needs to communicate,
        to devices on the home network, how they can discover services on the Thread mesh.</t>

        <t>This involves communicating the service discovery domain.
        In principle, this could be a registered globally unique domain name,
        it which case the normal DNS delegation mechanism using NS records
        allows the client to discover what server is authoritative for those names.
        In many cases though, the Thread border router will not have a
        registered globally unique domain name allocated.
        To provide out-of-the-box automatic operation, the Thread border router
        needs to be able to generate its own locally unique name to use.
        The special use domain name "local" is not suitable, because of its implied
        sematics that these names are resolved using link-local multicast DNS <xref target="RFC6762"/>.
        The special use domain name "home.arpa" is not suitable, because of its implied
        coordination via HNCP, and the home network's main gateway may not support HNCP <xref target="RFC8375"/>.
        To provide out-of-the-box automatic operation, this document proposes a new
        special use domain name "adhoc.arpa" for this purpose.
        By default a Thread border router will use the name "thread.adhoc.arpa".
        If this name is already in use on the home network, then a new unique
        name will be selected, such as "thread-2.adhoc.arpa".</t>

        <t>The Thread border router needs to communicate the
        service discovery domain to peers on the home network.
        In the case that the service discovery domain falls under the "adhoc.arpa"
        name, the Thread border router also needs to communicate that
        queries for these names need to be sent to the Thread border router
        directly, not to the client's default DNS recursive resolver.</t>

        <t>Three alternatives are being considered
          <list style='numbers'>
            <t>Use link-local Multicast DNS queries and records to convey
            the service discovery domain,
            and optionally the address to which queries should be sent.</t>
            <t>Define a new IPv6 router advertisement option
            to communicate the service discovery domain,
            and optionally the address to which queries should be sent.</t>
            <t>Add this information to the Multiple Provisioning Domain
            Router Advertisement option <xref target="RFC7556"/> <xref target="MPvD"/>.</t>
          </list>
        </t>
<?rfc subcompact="no" ?>

        <t>One question to answer is whether the Multicast DNS records
        or IPv6 router advertisement options would directly convey the domain
        name to use for service discovery, or a base name used to derive
        domain enumeration queries of the form lb._dns-sd._udp.&lt;domain&gt;
        <xref target="RFC6763"/>.
        </t>

        <t>Another question is whether to use a single Multicast DNS record
        or IPv6 router advertisement option
        that communicates both the domain name and the
        address to use for queries, or a pair of records/options,
        one carrying the name to use for service discovery, and
        a second, if necessary, associating an "adhoc.arpa" name with the
        address to use for those queries.</t>

        <t>With the appropriate configuration methods defined,
        and implemented on client devices,
        client devices on the home network would discover additional domains
        to use for service discovery, and send appropriate service discovery
        queries to Thread border routers on the home network.</t>

        <t>The same discovery domain, and optionally the address to which queries
        should be sent, is communicated to client devices on the Thread mesh
        using the Thread mesh management protocol.</t>

<?rfc needLines="40" ?>
      </section>

      <section title="Discovery of Services on the Home Network">

        <t>To facilitate devices on the Thread mesh discovering
        services offered on the home network, advertised using Multicast DNS,
        a Discovery Proxy <xref target="DisProx"/>
        is implemented in the Thread border router.</t>

        <t>As above in <xref target="ds-thread"/>
        the Thread mesh management protocol is used to communicate
        a discovery domain, and the address to which queries
        should be sent for that discovery domain, to client devices
        on the Thread mesh.</t>

        <t>The address in this case is the address of the Thread border router.
        The discovery domain could be some generated unique name under
        "adhoc.arpa", or it could be some fixed special use domain name.
        The fixed name could be a simple fixed string like "lan.arpa",
        or it could be a special reserved name under "adhoc.arpa" such as
        "services.adhoc.arpa". The latter is probably preferred
        because it avoids having to request multiple special use domain names <xref target="RFC6761"/>.
        Alternatively, we could organize all the required special names
        such that they fall under a single reserved special use domain name
        "services.arpa."</t>

        <t>When the Thread border router receives a query for a name
        under this discovery domain, it uses the Discovery Proxy mechanism
        <xref target="DisProx"/> to perform Multicast DNS queries
        on behalf of the client, returning the results to the client.</t>
<?rfc needLines="40" ?>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>As an informational document, this document
      introduces no new Security Considerations of its own.
      The various referenced documents each describe their
      own relevant Security Considerations as appropriate.</t>
    </section>

    <section title="Domain Name Reservation Considerations">
      <t>As currently envisaged, this document may end up requesting
      a special use domain name <xref target="RFC6761"/>.
      If so, once the special properties are fully determined,
      this section will be populated with the appropriate text.</t>
    </section>

  </middle>

  <back>
    <references title="Informative References">
      <?rfc include="reference.RFC.1034" ?>
      <?rfc include="reference.RFC.1035" ?>
      <?rfc include="reference.RFC.6761" ?>
      <?rfc include="reference.RFC.6762" ?>
      <?rfc include="reference.RFC.6763" ?>
      <?rfc include="reference.RFC.7556" ?>
      <?rfc include="reference.RFC.8375" ?>

      <?rfc include="reference.I-D.cheshire-dnssd-roadmap"             anchor='Roadmap' ?>
      <?rfc include="reference.I-D.ietf-dnssd-hybrid"                  anchor='DisProx' ?>
      <?rfc include="reference.I-D.ietf-dnssd-push"                    anchor='Push' ?>
      <?rfc include="reference.I-D.sctl-service-registration"          anchor='RegProt' ?>
      <?rfc include="reference.I-D.ietf-mboned-ieee802-mcast-problems" anchor='Mcast' ?>
      <?rfc include="reference.I-D.ietf-mif-mpvd-ndp-support"          anchor='MPvD' ?>

      <reference anchor="Thread"
      target="https://www.threadgroup.org/">
        <front>
          <title>Thread Wireless Mesh Networking</title>
          <author/>
          <date/>
        </front>
      </reference>

    </references>
  </back>
</rfc>
